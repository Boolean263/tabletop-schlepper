import socket
import sys
import json

import ttschlepper.constants as const

SEND_GET_SCRIPTS=0  # Request all scripts
SEND_SAVE_PLAY=1    # Send all scripts; save andd play
SEND_CUSTOM_MSG=2   # Send a message to the onExternalMessage event handler
SEND_RUN_CODE=3     # Run the given lua code on the object with the given guid

RECV_NEW_SCRIPT=0   # User loads "Scripting Editor" on an object with no script
RECV_NEW_GAME=1     # New game; sends all scripts
RECV_PRINT=2        # print() message
RECV_ERROR=3        # lua error message
RECV_MESSAGE=4      # Message generated by sendExternalMessage()
RECV_RETURN=5       # Result of SEND_RUN_CODE being run
RECV_SAVE=6         # Game was saved
RECV_NEW_OBJECT=7   # User created a new object

RECV_BUFF=1024

def get_msg(aListen):
    raw = b""
    if not aListen[1]: aListen = (aListen[0], const.TTS_CLIENT_PORT)
    sListen = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sListen.bind(aListen)

    try:
        sListen.listen(1)
        conn, addr = sListen.accept()
        while True:
            data = conn.recv(RECV_BUFF)
            if len(data) == 0:
                break
            raw += data

    finally:
        sListen.close()

    return raw

def send_msg(mId, aTalk, aListen, obj=None):
    if obj is None:
        obj = {}
    obj['messageID'] = mId
    msg = json.dumps(obj)

    if not aTalk[1]: aTalk = (aTalk[0], const.TTS_SERVER_PORT)

    sTalk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sTalk.connect(aTalk)

    try:
        sTalk.sendall(msg.encode())
    finally:
        sTalk.close()

    return get_msg(aListen)



# Editor modelines - http://www.wireshark.org/tools/modelines.html
#
# Local variables:
# c-basic-offset: 4
# tab-width: 4
# indent-tabs-mode: nil
# coding: utf-8
# End:
#
# vi:set shiftwidth=4 tabstop=4 expandtab fileencoding=utf-8:
# :indentSize=4:tabSize=4:noTabs=true:coding=utf-8:
